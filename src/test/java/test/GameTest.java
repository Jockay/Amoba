package test;

import model.Game;

import org.junit .Test;

import static org.junit.Assert.*;

public class GameTest {

	@Test
	public void testCheck() {
		/**
		 * Tesztelhető üzleti logika.
		 */
		Game g = new Game();
		
		/*g.board = new int[][] {
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
			  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12
		};
		g.p1.setTurn(true);
		g.p2.setTurn(false);
		assertEquals(0, g.checkBoard());
		
		// bal-jobb fel és p1 kör
		g.board = new int[][] {
				{0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
				{0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0},
				{0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
			  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12
		};
		g.p1.setTurn(true);
		g.p2.setTurn(false);
		assertEquals(1, g.checkBoard());
		
		// bal-jobb fel és p2 kör
		g.board = new int[][] {
				{0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
				{0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
			  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12
		};
		g.p2.setTurn(true);
		g.p1.setTurn(false);
		assertEquals(2, g.checkBoard());
		
		// sor és p1 kör
		g.board = new int[][] {
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 2 },
				{0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2 },
				{0, 0, 0, 2, 0, 0, 2, 0, 1, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 1 },
				{0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 1, 0 },
				{0, 0, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0 },
				{0, 1, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2 },
				{0, 0, 0, 2, 0, 0, 2, 2, 0, 1, 0, 0, 0 },
				{0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 0 },
				{0, 0, 0, 0, 0, 2, 2, 1, 0, 1, 1, 0, 0 },
				{0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
			  // 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12
		};
		g.p1.setTurn(true);
		g.p2.setTurn(false);
		assertEquals(1, g.checkBoard());
		
		
		// sor és p2 kör
		g.board = new int[][] {
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0 },
				{0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		};
		g.p2.setTurn(true);
		g.p1.setTurn(false);
		assertEquals(2, g.checkBoard());
		
		// oszlop és p1 kör
		g.board = new int[][] {
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
			};
		g.p2.setTurn(true);
		g.p1.setTurn(false);
		assertEquals(2, g.checkBoard());
		
		// oszlop és p2 kör
		g.board = new int[][] {
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 1, 2, 1, 1, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 1, 2, 2, 2, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		};
		g.p2.setTurn(true);
		g.p1.setTurn(false);
		assertEquals(2, g.checkBoard());
		
		// bal-jobb le és p1 kör
		g.board = new int[][] {
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 },
				{2, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0 },
				{0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 1 },
				{0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
			};
		g.p1.setTurn(true);
		g.p2.setTurn(false);
		assertEquals(1, g.checkBoard());
		
		
		// bal-jobb le és p2 kör
		g.board = new int[][] {
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
				{0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
				{0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0 },
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0 },
				{2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2 }
			};
		g.p2.setTurn(true);
		g.p1.setTurn(false);
		assertEquals(2, g.checkBoard());

		// fail("Not yet implemented");*/
	}

}
